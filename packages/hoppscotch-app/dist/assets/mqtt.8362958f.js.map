{"version":3,"file":"mqtt.8362958f.js","sources":["../../src/pages/realtime/mqtt.vue"],"sourcesContent":["<template>\n  <AppPaneLayout layout-id=\"mqtt\">\n    <template #primary>\n      <div\n        class=\"sticky top-0 z-10 flex flex-shrink-0 p-4 overflow-x-auto space-x-2 bg-primary\"\n      >\n        <div class=\"inline-flex flex-1 space-x-2\">\n          <input\n            id=\"mqtt-url\"\n            v-model=\"url\"\n            type=\"url\"\n            autocomplete=\"off\"\n            spellcheck=\"false\"\n            class=\"w-full px-4 py-2 border rounded bg-primaryLight border-divider text-secondaryDark\"\n            :placeholder=\"t('mqtt.url')\"\n            :disabled=\"\n              connectionState === 'CONNECTED' ||\n              connectionState === 'CONNECTING'\n            \"\n            @keyup.enter=\"isUrlValid ? toggleConnection() : null\"\n          />\n          <ButtonPrimary\n            id=\"connect\"\n            :disabled=\"!isUrlValid\"\n            class=\"w-32\"\n            :label=\"\n              connectionState === 'CONNECTING'\n                ? t('action.connecting')\n                : connectionState === 'DISCONNECTED'\n                ? t('action.connect')\n                : t('action.disconnect')\n            \"\n            :loading=\"connectionState === 'CONNECTING'\"\n            @click=\"toggleConnection\"\n          />\n        </div>\n        <div class=\"flex space-x-2\">\n          <input\n            id=\"mqtt-username\"\n            v-model=\"username\"\n            type=\"text\"\n            spellcheck=\"false\"\n            class=\"input\"\n            :placeholder=\"t('authorization.username')\"\n          />\n          <input\n            id=\"mqtt-password\"\n            v-model=\"password\"\n            type=\"password\"\n            spellcheck=\"false\"\n            class=\"input\"\n            :placeholder=\"t('authorization.password')\"\n          />\n        </div>\n      </div>\n    </template>\n    <template #secondary>\n      <RealtimeLog\n        :title=\"t('mqtt.log')\"\n        :log=\"log\"\n        @delete=\"clearLogEntries()\"\n      />\n    </template>\n    <template #sidebar>\n      <div class=\"flex items-center justify-between p-4\">\n        <label for=\"pubTopic\" class=\"font-semibold text-secondaryLight\">\n          {{ t(\"mqtt.topic\") }}\n        </label>\n      </div>\n      <div class=\"flex px-4\">\n        <input\n          id=\"pubTopic\"\n          v-model=\"pubTopic\"\n          class=\"input\"\n          :placeholder=\"t('mqtt.topic_name')\"\n          type=\"text\"\n          autocomplete=\"off\"\n          spellcheck=\"false\"\n        />\n      </div>\n      <div class=\"flex items-center justify-between p-4\">\n        <label for=\"mqtt-message\" class=\"font-semibold text-secondaryLight\">\n          {{ t(\"mqtt.communication\") }}\n        </label>\n      </div>\n      <div class=\"flex px-4 space-x-2\">\n        <input\n          id=\"mqtt-message\"\n          v-model=\"message\"\n          class=\"input\"\n          type=\"text\"\n          autocomplete=\"off\"\n          :placeholder=\"t('mqtt.message')\"\n          spellcheck=\"false\"\n        />\n        <ButtonPrimary\n          id=\"publish\"\n          name=\"get\"\n          :disabled=\"!canPublish\"\n          :label=\"t('mqtt.publish')\"\n          @click=\"publish\"\n        />\n      </div>\n      <div\n        class=\"flex items-center justify-between p-4 mt-4 border-t border-dividerLight\"\n      >\n        <label for=\"subTopic\" class=\"font-semibold text-secondaryLight\">\n          {{ t(\"mqtt.topic\") }}\n        </label>\n      </div>\n      <div class=\"flex px-4 space-x-2\">\n        <input\n          id=\"subTopic\"\n          v-model=\"subTopic\"\n          type=\"text\"\n          autocomplete=\"off\"\n          :placeholder=\"t('mqtt.topic_name')\"\n          spellcheck=\"false\"\n          class=\"input\"\n        />\n        <ButtonPrimary\n          id=\"subscribe\"\n          name=\"get\"\n          :disabled=\"!canSubscribe\"\n          :label=\"\n            subscriptionState ? t('mqtt.unsubscribe') : t('mqtt.subscribe')\n          \"\n          reverse\n          @click=\"toggleSubscription\"\n        />\n      </div>\n    </template>\n  </AppPaneLayout>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, onMounted, onUnmounted, ref, watch } from \"vue\"\nimport { debounce } from \"lodash-es\"\nimport { MQTTConnection, MQTTError } from \"~/helpers/realtime/MQTTConnection\"\nimport { useI18n } from \"@composables/i18n\"\nimport { useToast } from \"@composables/toast\"\nimport {\n  useReadonlyStream,\n  useStream,\n  useStreamSubscriber,\n} from \"@composables/stream\"\nimport {\n  addMQTTLogLine,\n  MQTTConn$,\n  MQTTEndpoint$,\n  MQTTLog$,\n  setMQTTConn,\n  setMQTTEndpoint,\n  setMQTTLog,\n} from \"~/newstore/MQTTSession\"\nimport RegexWorker from \"@workers/regex?worker\"\n\nconst t = useI18n()\nconst toast = useToast()\nconst { subscribeToStream } = useStreamSubscriber()\n\nconst url = useStream(MQTTEndpoint$, \"\", setMQTTEndpoint)\nconst log = useStream(MQTTLog$, [], setMQTTLog)\nconst socket = useStream(MQTTConn$, new MQTTConnection(), setMQTTConn)\nconst connectionState = useReadonlyStream(\n  socket.value.connectionState$,\n  \"DISCONNECTED\"\n)\nconst subscriptionState = useReadonlyStream(\n  socket.value.subscriptionState$,\n  false\n)\n\nconst isUrlValid = ref(true)\nconst pubTopic = ref(\"\")\nconst subTopic = ref(\"\")\nconst message = ref(\"\")\nconst username = ref(\"\")\nconst password = ref(\"\")\n\nlet worker: Worker\n\nconst canPublish = computed(\n  () =>\n    pubTopic.value !== \"\" &&\n    message.value !== \"\" &&\n    connectionState.value === \"CONNECTED\"\n)\nconst canSubscribe = computed(\n  () => subTopic.value !== \"\" && connectionState.value === \"CONNECTED\"\n)\n\nconst workerResponseHandler = ({\n  data,\n}: {\n  data: { url: string; result: boolean }\n}) => {\n  if (data.url === url.value) isUrlValid.value = data.result\n}\n\nonMounted(() => {\n  worker = new RegexWorker()\n  worker.addEventListener(\"message\", workerResponseHandler)\n\n  subscribeToStream(socket.value.event$, (event) => {\n    switch (event?.type) {\n      case \"CONNECTING\":\n        log.value = [\n          {\n            payload: `${t(\"state.connecting_to\", { name: url.value })}`,\n            source: \"info\",\n            color: \"var(--accent-color)\",\n            ts: undefined,\n          },\n        ]\n        break\n\n      case \"CONNECTED\":\n        log.value = [\n          {\n            payload: `${t(\"state.connected_to\", { name: url.value })}`,\n            source: \"info\",\n            color: \"var(--accent-color)\",\n            ts: Date.now(),\n          },\n        ]\n        toast.success(`${t(\"state.connected\")}`)\n        break\n\n      case \"MESSAGE_SENT\":\n        addMQTTLogLine({\n          prefix: `${event.message.topic}`,\n          payload: event.message.message,\n          source: \"client\",\n          ts: Date.now(),\n        })\n        break\n\n      case \"MESSAGE_RECEIVED\":\n        addMQTTLogLine({\n          prefix: `${event.message.topic}`,\n          payload: event.message.message,\n          source: \"server\",\n          ts: event.time,\n        })\n        break\n\n      case \"SUBSCRIBED\":\n        addMQTTLogLine({\n          payload: subscriptionState.value\n            ? `${t(\"state.subscribed_success\", { topic: subTopic.value })}`\n            : `${t(\"state.unsubscribed_success\", { topic: subTopic.value })}`,\n          source: \"server\",\n          ts: event.time,\n        })\n        break\n\n      case \"SUBSCRIPTION_FAILED\":\n        addMQTTLogLine({\n          payload: subscriptionState.value\n            ? `${t(\"state.subscribed_failed\", { topic: subTopic.value })}`\n            : `${t(\"state.unsubscribed_failed\", { topic: subTopic.value })}`,\n          source: \"server\",\n          ts: event.time,\n        })\n        break\n\n      case \"ERROR\":\n        addMQTTLogLine({\n          payload: getI18nError(event.error),\n          source: \"info\",\n          color: \"#ff5555\",\n          ts: event.time,\n        })\n        break\n\n      case \"DISCONNECTED\":\n        addMQTTLogLine({\n          payload: t(\"state.disconnected_from\", { name: url.value }).toString(),\n          source: \"info\",\n          color: \"#ff5555\",\n          ts: event.time,\n        })\n        toast.error(`${t(\"state.disconnected\")}`)\n        break\n    }\n  })\n})\n\nconst debouncer = debounce(function () {\n  worker.postMessage({ type: \"ws\", url: url.value })\n}, 1000)\n\nwatch(url, (newUrl) => {\n  if (newUrl) debouncer()\n})\n\nonUnmounted(() => {\n  worker.terminate()\n})\n\n// METHODS\nconst toggleConnection = () => {\n  // If it is connecting:\n  if (connectionState.value === \"DISCONNECTED\") {\n    return socket.value.connect(url.value, username.value, password.value)\n  }\n  // Otherwise, it's disconnecting.\n  socket.value.disconnect()\n}\nconst publish = () => {\n  socket.value?.publish(pubTopic.value, message.value)\n}\nconst toggleSubscription = () => {\n  if (subscriptionState.value) {\n    socket.value.unsubscribe(subTopic.value)\n  } else {\n    socket.value.subscribe(subTopic.value)\n  }\n}\n\nconst getI18nError = (error: MQTTError): string => {\n  if (typeof error === \"string\") return error\n\n  switch (error.type) {\n    case \"CONNECTION_NOT_ESTABLISHED\":\n      return t(\"state.connection_lost\").toString()\n    case \"SUBSCRIPTION_FAILED\":\n      return t(\"state.mqtt_subscription_failed\", {\n        topic: error.topic,\n      }).toString()\n    case \"PUBLISH_ERROR\":\n      return t(\"state.publish_error\", { topic: error.topic }).toString()\n    case \"CONNECTION_LOST\":\n      return t(\"state.connection_lost\").toString()\n    case \"CONNECTION_FAILED\":\n      return t(\"state.connection_failed\").toString()\n    default:\n      return t(\"state.disconnected_from\", { name: url.value }).toString()\n  }\n}\nconst clearLogEntries = () => {\n  log.value = []\n}\n</script>\n"],"names":["t","useI18n","toast","useToast","subscribeToStream","useStreamSubscriber","url","useStream","MQTTEndpoint$","setMQTTEndpoint","log","MQTTLog$","setMQTTLog","socket","MQTTConn$","MQTTConnection","setMQTTConn","connectionState","useReadonlyStream","subscriptionState","isUrlValid","ref","pubTopic","subTopic","message","username","password","worker","canPublish","computed","canSubscribe","workerResponseHandler","data","onMounted","RegexWorker","event","addMQTTLogLine","getI18nError","debouncer","debounce","watch","newUrl","onUnmounted","toggleConnection","publish","_a","toggleSubscription","error","clearLogEntries"],"mappings":"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"}